#!/usr/bin/env bash

set -eu

source "${EAVE_HOME}"/develop/functions.bash

function _print_help() (
	statusmsg -o "Build and deploy a service."
	statusmsg -o "Usage: deploy-service"
	statusmsg -o "  -h : Print this message."
)

function _deploy() (
	set -e

	local service=""

	# Unset necessary to reset global getopts memory
	unset argname OPTARG OPTIND
	while getopts "s:" argname; do
		case "$argname" in
		s) service=$OPTARG ;;
		*)
			statusmsg -e "unknown option: $argname"
			_print_help
			exit 1
			;;
		esac
	done

	if test -z "$service"; then
		statusmsg -e "service is required."
		_print_help
		exit 1
	fi

	local dockerfile
	dockerfile="$(readlink -fn Dockerfile)"

	local gcloudproject
	gcloudproject="$(e.gcloudproject)"

	local gitsha
	gitsha="$(git rev-parse --short HEAD)"

	local imagename="us-central1-docker.pkg.dev/${gcloudproject}/docker/${service}"
	local release_date
	release_date=$(date --utc --iso-8601=seconds)

	docker build --check \
		-f "$dockerfile" \
		"$EAVE_HOME"

	docker build \
		--no-cache \
		-t "$imagename:latest" \
		-t "$imagename:$gitsha" \
		-f "$dockerfile" \
		--build-arg GAE_RELEASE_DATE="$release_date" \
		--build-arg GAE_VERSION="$gitsha" \
		"$EAVE_HOME"

	statusmsg -a "Pushing all tags for $imagename"
	if e.confirm; then
		docker push --all-tags "$imagename"
	fi

	statusmsg -a "Rolling out $imagename:$gitsha to $service"
	if e.confirm; then
		kubectl --context="$gcloudproject" -n eave rollout restart deployment/"$service"
		kubectl --context="$gcloudproject" -n eave rollout status deployment/"$service"
	fi
)

function main() (
	e.verify-clean-git-index

	local service
	service="$(jq -r ".kubeService" eavevars.json)"

	# Unset necessary to reset global getopts memory
	unset argname OPTARG OPTIND
	while getopts "h" argname; do
		case "$argname" in
		h)
			_print_help
			exit 0
			;;
		*)
			statusmsg -e "unknown option: $argname"
			_print_help
			exit 1
			;;
		esac
	done

	if test -z "$service"; then
		statusmsg -e "service is required."
		_print_help
		exit 1
	fi

	local gcloudproject
	gcloudproject="$(e.gcloudproject)"

	local slackts=""

	if test "$gcloudproject" == "eave-production"; then
		slackts=$("${EAVE_HOME}"/bin/cli deploy notify-slack --status=in_progress --app="$service" --cwd="$(pwd)")
	fi

	set +e
	_deploy -s "$service"
	local result=$?

	if test "$gcloudproject" == "eave-production"; then
		if test $result -eq 0; then
			"${EAVE_HOME}"/bin/cli deploy notify-slack --status=complete --app="$service" --msg-timestamp="$slackts" --cwd="$(pwd)"
		else
			"${EAVE_HOME}"/bin/cli deploy notify-slack --status=failed --app="$service" --msg-timestamp="$slackts" --cwd="$(pwd)"
		fi
	fi
)

main "$@"
