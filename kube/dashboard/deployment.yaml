---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: dashboard-cert
  namespace: "${NAMESPACE}"
spec:
  domains:
    - "dashboard.${EAVE_ROOT_DOMAIN}"

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dashboard-ingress
  namespace: "${NAMESPACE}"
  annotations:
    networking.gke.io/v1beta1.FrontendConfig: shared-fc
    networking.gke.io/managed-certificates: dashboard-cert
    kubernetes.io/ingress.global-static-ip-name: dashboard-dot-eave-dot-dev-addr
    kubernetes.io/ingress.class: gce
  labels:
    app: dashboard-app
spec:
  # ingressClassName: gce # This does not work. Without the "ingress.class" annotation, the LB isn't created.
  defaultBackend:
    service:
      name: dashboard
      port:
        name: http

---
apiVersion: v1
kind: Service
metadata:
  name: dashboard
  namespace: "${NAMESPACE}"
  annotations:
    beta.cloud.google.com/backend-config: '{"default": "shared-bc"}'
spec:
  type: NodePort
  selector:
    app: dashboard-app
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: app

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ksa-app-dashboard
  namespace: "${NAMESPACE}"
  annotations:
    iam.gke.io/gcp-service-account: "gsa-app-dashboard@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard-deployment
  namespace: "${NAMESPACE}"
spec:
  selector:
    matchLabels:
      app: dashboard-app
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: dashboard-app
    spec:
      serviceAccountName: ksa-app-dashboard
      containers:
        - name: dashboard
          image: "us-central1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/docker/dashboard:${APP_VERSION}"
          resources:
            # requests and limits must always be the same on Autopilot clusters without bursting.
            # if requests is omitted, the limits values are used.
            limits:
              memory: "1Gi"
              cpu: "250m"

          envFrom:
            - configMapRef:
                name: shared-configmap
            - configMapRef:
                name: dashboard-configmap

          env:
            # gunicorn options
            - name: GUNICORN_CMD_ARGS
              value: "--bind=0.0.0.0:8000 --workers=3 --timeout=90"

          ports:
            - name: app
              containerPort: 8000
