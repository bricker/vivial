---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: "${HEALTHCHECK_NAME}"
spec:
  healthCheck:
    type: HTTP
    requestPath: /status
    port: 8000
  customResponseHeaders:
    headers:
      - "server: unspecified"

---
apiVersion: v1
kind: Service
metadata:
  name: noop-svc
  namespace: "${NAMESPACE}"
spec:
  type: ExternalName
  externalName: eave.fyi


---
apiVersion: v1
kind: Service
metadata:
  name: "${SERVICENAME}"
  namespace: "${NAMESPACE}"
  annotations:
    beta.cloud.google.com/backend-config: '{"default": "${HEALTHCHECK_NAME}"}'
spec:
  selector:
    app: "${APPNAME}"
  type: NodePort
  ports:
    - name: "${SERVICE_PORT_NAME}"
      protocol: TCP
      port: 8080
      targetPort: "${APP_PORT_NAME}"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "${KSANAME}"
  namespace: "${NAMESPACE}"
  annotations:
    iam.gke.io/gcp-service-account: "${GSANAME}@${GOOGLE_CLOUD_PROJECT}.iam.gserviceaccount.com"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-api-deployment
  namespace: "${NAMESPACE}"
spec:
  selector:
    matchLabels:
      app: "${APPNAME}"
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
  template:
    metadata:
      labels:
        app: "${APPNAME}"
    spec:
      serviceAccountName: "${KSANAME}"
      containers:
        - name: core-api
          image: "us-central1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/docker/core-api:${APP_VERSION}"
          resources:
            requests:
              memory: "768Mi"
              cpu: "100m"
            limits:
              memory: "768Mi"
              cpu: "100m"

          envFrom:
            - configMapRef:
                name: "${SHARED_CONFIGMAP_NAME}"
            - configMapRef:
                name: "${CONFIGMAP_NAME}"

          env:
            - name: EAVE_DB_USER
              value: "${GSANAME}@${GOOGLE_CLOUD_PROJECT}.iam"
            - name: EAVE_DB_HOST
              value: "127.0.0.1"
            - name: EAVE_DB_PORT
              value: "5432"
            # gunicorn options
            - name: GUNICORN_CMD_ARGS
              value: "--bind=0.0.0.0:8000 --workers=3 --timeout=90"

          ports:
            - name: "${APP_PORT_NAME}"
              containerPort: 8000

        - name: cloud-sql-proxy
          # This uses the latest version of the Cloud SQL Proxy
          # It is recommended to use a specific version for production environments.
          # See: https://github.com/GoogleCloudPlatform/cloudsql-proxy
          image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:latest
          args:
            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            - "--private-ip"

            # If you are not connecting with Automatic IAM, you can delete
            # the following flag.
            - "--auto-iam-authn"

            # tcp should be set to the port the proxy should listen on
            # and should match the DB_PORT value set above.
            # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
            - "--port=5432"
            - "--structured-logs"
            # - "--unix-socket /cloudsql"
            - "${GOOGLE_CLOUD_PROJECT}:us-central1:eave-pg-core"
          # volumeMounts:
          #   - name: cloudsql-socket
          #     mountPath: /cloudsql
          securityContext:
            # The default Cloud SQL proxy image runs as the
            # "nonroot" user and group (uid: 65532) by default.
            runAsNonRoot: true
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 2Gi
