#!/usr/bin/env bash

set -eu -o pipefail

source "$EAVE_HOME"/develop/functions.bash

function _print_help () (
	statusmsg -o "Usage: apply -a appname [-tr]"
	statusmsg -o "  -a dirname : Required. Directory to apply, relative to the kube directory. Do not include leading or trailing slashes or dots. eg 'core-api' or 'metabase'"
	statusmsg -o "  -t : Optional. Enables dry-run. (default: off)"
	statusmsg -o "  -r : Optional. Enables rollout after apply. (default: off)"
	statusmsg -o "  -h : Print this message."
)

function main () (
	local gcloudproject; gcloudproject="$(^gcloudproject)"
	local _dirname=""
	local _dryrun=""
	local _rollout=false

	while getopts "a:trh" argname; do
		case "$argname" in
		a) _dirname=$OPTARG ;;
		t) _dryrun="--dry-run=client" ;;
		r) _rollout=true ;;
		h)
			_print_help
			exit 0
			;;
		*)
			statusmsg -e "unknown option: $argname"
			_print_help
			exit 1
			;;
		esac
	done

	if test -z "$_dirname"; then
		_print_help
		exit 1
	fi

	python -m dotenv --file "${EAVE_HOME}/kube/shared/vars.share.env" run --override -- \
		python -m dotenv --file "${EAVE_HOME}/kube/$_dirname/vars.share.env" run --override -- \
			python -m dotenv --file "${EAVE_HOME}/kube/.$gcloudproject.env" run --override -- \
				yq eval-all '(.. | select(tag == "!!str")) |= envsubst(nu)' "${EAVE_HOME}/kube/$_dirname"/*.yaml \
					| kubectl apply $_dryrun -f -

	if $_rollout; then
		"$(^parentpath)"/bin/rollout -a "$_dirname"
	fi
)

main "$@"