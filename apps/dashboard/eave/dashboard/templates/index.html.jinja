<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Segment analytics tracking -->
    <script>
        !function () {
            var i = "analytics", analytics = window[i] = window[i] || []; if (!analytics.initialize) if (analytics.invoked) window.console && console.error && console.error("Segment snippet included twice."); else {
                analytics.invoked = !0; analytics.methods = ["trackSubmit", "trackClick", "trackLink", "trackForm", "pageview", "identify", "reset", "group", "track", "ready", "alias", "debug", "page", "screen", "once", "off", "on", "addSourceMiddleware", "addIntegrationMiddleware", "setAnonymousId", "addDestinationMiddleware", "register"]; analytics.factory = function (e) { return function () { if (window[i].initialized) return window[i][e].apply(window[i], arguments); var n = Array.prototype.slice.call(arguments); if (["track", "screen", "alias", "group", "page", "identify"].indexOf(e) > -1) { var c = document.querySelector("link[rel='canonical']"); n.push({ __t: "bpc", c: c && c.getAttribute("href") || void 0, p: location.pathname, u: location.href, s: location.search, t: document.title, r: document.referrer }) } n.unshift(e); analytics.push(n); return analytics } }; for (var n = 0; n < analytics.methods.length; n++) { var key = analytics.methods[n]; analytics[key] = analytics.factory(key) } analytics.load = function (key, n) { var t = document.createElement("script"); t.type = "text/javascript"; t.async = !0; t.setAttribute("data-global-segment-analytics-key", i); t.src = "https://cdn.segment.com/analytics.js/v1/" + key + "/analytics.min.js"; var r = document.getElementsByTagName("script")[0]; r.parentNode.insertBefore(t, r); analytics._loadOptions = n }; analytics._writeKey = "GcB5ShHbFcZZKIGTlvanJerSyKp9yJNv";; analytics.SNIPPET_VERSION = "5.2.0";
                analytics.load("GcB5ShHbFcZZKIGTlvanJerSyKp9yJNv");
            }
        }();
    </script>
    <!-- End Segment analytics -->

    <!-- window -->
    <script>
        const VISITOR_ID_COOKIE_NAME = "vivial_visitor_id";
        const MAX_ALLOWED_COOKIE_AGE_SEC = 60 * 60 * 24 * 400; // 400 days (maximum allowed value in Chrome)

        // Copied UUID code from https://github.com/uuidjs/uuid/blob/main/src/stringify.js
        // This is done for performance. Calling `rnds[i].toString(16)` is cleaner but has more runtime overhead.
        const byteToHex = [];
        for (let i = 0; i < 256; ++i) {
            byteToHex.push((i + 0x100).toString(16).slice(1));
        }

        /**
         * Generates a UUID (Universally Unique Identifier) using the v4 variant.
         * Prefers crypto.randomUUID when available. Otherwise, builds the UUID manually.
         *
         * @returns a randomly generated UUID.
         */
        function uuidv4() {
            // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID
            // crypto.randomUUID is only available in secure contexts (eg https).
            if (crypto.randomUUID !== undefined) {
                return crypto.randomUUID();
            } else {
                // Copied from https://github.com/uuidjs/uuid/blob/main/src/v4.js
                // This is necessary when running in non-secure contexts.
                const rnds = new Uint8Array(16); // # of random values to pre-allocate
                crypto.getRandomValues(rnds); // modifies the array in-place
                // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
                rnds[6] = (rnds[6] & 0x0f) | 0x40;
                rnds[8] = (rnds[8] & 0x3f) | 0x80;

                return (
                    byteToHex[rnds[0]] + byteToHex[rnds[1]] + byteToHex[rnds[2]] + byteToHex[rnds[3]] +
                    "-" +
                    byteToHex[rnds[4]] + byteToHex[rnds[5]] +
                    "-" +
                    byteToHex[rnds[6]] + byteToHex[rnds[7]] +
                    "-" +
                    byteToHex[rnds[8]] + byteToHex[rnds[9]] +
                    "-" +
                    byteToHex[rnds[10]] + byteToHex[rnds[11]] + byteToHex[rnds[12]] + byteToHex[rnds[13]] + byteToHex[rnds[14]] + byteToHex[rnds[15]]
                ).toLowerCase();
            }
        }

        /**
        * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie
        */
        function setCookie({
            name,
            value,
            maxAgeSeconds,
            expires,
            path = "/",
            domain,
            isSecure = true,
            sameSite = "Lax",
        }) {
            const cookieAttrs = [[name, encodeURIComponent(value)]];

            if (maxAgeSeconds !== undefined) {
                cookieAttrs.push(["Max-Age", `${maxAgeSeconds}`]);
            }

            if (expires !== undefined) {
                cookieAttrs.push(["Expires", expires.toUTCString()]);
            }

            cookieAttrs.push(["Path", path]);

            // https://publicsuffix.org/list/public_suffix_list.dat
            if (!domain) {
                // FIXME: This _does not work_ for many domains, eg .co.uk domains.
                // The public suffix list should be used.
                const url = new URL(window.location.href);
                const parts = url.hostname.split(".");
                domain = parts.slice(-2).join(".");
            }

            cookieAttrs.push(["Domain", domain]);
            cookieAttrs.push(["SameSite", sameSite]);

            if (sameSite === "None") {
                // SameSite None cookies must also be Secure, per spec
                isSecure = true;
            }

            if (isSecure) {
                cookieAttrs.push(["Secure", true]);
            }

            const cookieValue = cookieAttrs
                .map(([attrName, attrValue]) => (attrValue === true ? `${attrName}` : `${attrName}=${attrValue}`))
                .join(";");
            document.cookie = cookieValue;
        }

        function getVisitorId() {
            const urlParamifiedCookies = document.cookie.replace(/; */g, "&");
            const cookies = new URLSearchParams(urlParamifiedCookies);
            const visIdCookie = cookies.get(VISITOR_ID_COOKIE_NAME);
            return visIdCookie ? decodeURIComponent(visIdCookie) : null;
        }

        function setVisitorId(value) {
            setCookie({
                name: VISITOR_ID_COOKIE_NAME,
                value: value,
                maxAgeSeconds: MAX_ALLOWED_COOKIE_AGE_SEC,
            });
        }

        // refresh visitor id cookie
        setVisitorId(getVisitorId() || uuidv4());

        window.app = {
            apiBase: '{{api_base}}',
            assetBase: '{{asset_base}}',
            analytics: window.analytics,
            visitorId: getVisitorId(),
        };
    </script>

    <!-- Google Fonts (DM Sans, Pattaya) -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Pattaya&family=DM+Sans:wght@400;600;700&display=swap"
        rel="stylesheet">
    <!-- End Google Fonts -->

    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="{{asset_base}}/images/eave-logo-favicon.png">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="Vivial: plans without planning." />
    <title>{{ page_title|default("Vivial") }}</title>

    <script defer src="{{asset_base}}/dist/main.js"></script>
</head>

<body>
    <div id="root"></div>
</body>

</html>