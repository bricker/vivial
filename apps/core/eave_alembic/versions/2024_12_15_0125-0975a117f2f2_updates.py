"""updates

Revision ID: 0975a117f2f2
Revises: d1b7653758e3
Create Date: 2024-12-15 01:25:31.403216

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0975a117f2f2"
down_revision = "d1b7653758e3"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "stripe_payment_intent_references",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("stripe_payment_intent_id", sa.String(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("outing_id", sa.Uuid(), nullable=False),
        sa.Column(
            "created", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("updated", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["outing_id"], ["outings.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("account_id", "stripe_payment_intent_id"),
        sa.UniqueConstraint("id"),
    )
    op.drop_table("account_bookings")
    op.drop_table("activity_images")

    op.add_column("accounts", sa.Column("stripe_customer_id", sa.String(), nullable=True))
    op.drop_constraint("accounts_email_key", "accounts", type_="unique")
    op.create_index(op.f("ix_accounts_email"), "accounts", ["email"], unique=True)

    op.create_index(
        op.f("ix_booking_activity_templates_booking_id"), "booking_activity_templates", ["booking_id"], unique=False
    )
    op.create_index(
        op.f("ix_booking_reservation_templates_booking_id"),
        "booking_reservation_templates",
        ["booking_id"],
        unique=False,
    )
    op.add_column("bookings", sa.Column("stripe_payment_intent_reference_id", sa.Uuid(), nullable=True))
    op.drop_index("account_id_booking_index", table_name="bookings")
    op.create_index(op.f("ix_bookings_reserver_details_id"), "bookings", ["reserver_details_id"], unique=False)
    op.create_index(
        op.f("ix_bookings_stripe_payment_intent_reference_id"),
        "bookings",
        ["stripe_payment_intent_reference_id"],
        unique=False,
    )
    op.create_index(op.f("ix_bookings_survey_id"), "bookings", ["survey_id"], unique=False)
    op.drop_constraint("surveys_booking_fk", "bookings", type_="foreignkey")
    op.drop_constraint("accounts_booking_fk", "bookings", type_="foreignkey")
    op.drop_constraint("reserver_details_booking_fk", "bookings", type_="foreignkey")
    op.create_foreign_key(
        None,
        "bookings",
        "stripe_payment_intent_references",
        ["stripe_payment_intent_reference_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(None, "bookings", "surveys", ["survey_id"], ["id"], ondelete="SET NULL")
    op.create_foreign_key(None, "bookings", "reserver_details", ["reserver_details_id"], ["id"], ondelete="SET NULL")
    op.drop_column("bookings", "account_id")
    op.add_column(
        "outing_activities", sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False)
    )
    op.create_unique_constraint(None, "outing_activities", ["id"])
    op.create_unique_constraint(None, "outing_preferences", ["id"])
    op.add_column(
        "outing_reservations", sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False)
    )
    op.create_unique_constraint(None, "outing_reservations", ["id"])
    op.alter_column("outings", "visitor_id", existing_type=sa.UUID(), type_=sa.String(), nullable=True)
    op.drop_constraint("account_id_outing_fk", "outings", type_="foreignkey")
    op.create_foreign_key(None, "outings", "accounts", ["account_id"], ["id"], ondelete="SET NULL")
    op.alter_column("surveys", "visitor_id", existing_type=sa.UUID(), type_=sa.String(), nullable=True)
    op.drop_constraint("account_id_survey_fk", "surveys", type_="foreignkey")
    op.create_foreign_key(None, "surveys", "accounts", ["account_id"], ["id"], ondelete="SET NULL")
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
