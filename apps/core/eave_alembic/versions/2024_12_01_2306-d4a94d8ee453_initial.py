"""initial

Revision ID: d4a94d8ee453
Revises:
Create Date: 2024-12-01 23:06:48.197494

"""

import geoalchemy2
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import eave.core.orm.address_types

# revision identifiers, used by Alembic.
revision = "d4a94d8ee453"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accounts",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("password_key_salt", sa.String(), nullable=False),
        sa.Column("password_key", sa.String(), nullable=False),
        sa.Column("last_login", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=True),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "activities",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT", srid=4326, from_text="ST_GeogFromText", name="geography", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("subcategory_id", sa.Uuid(), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column("availability", sa.String(), nullable=False),
        sa.Column("address", eave.core.orm.address_types.PostgisStdaddrColumnType(), nullable=False),
        sa.Column("is_bookable", sa.Boolean(), nullable=False),
        sa.Column("booking_url", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_activities_coordinates", "activities", ["coordinates"], unique=False, postgresql_using="gist")
    op.create_table(
        "eventbrite_events",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("eventbrite_event_id", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("time_range", postgresql.TSTZRANGE(), nullable=False),
        sa.Column("cost_cents_range", postgresql.INT4RANGE(), nullable=False),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT", srid=4326, from_text="ST_GeogFromText", name="geography", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("subcategory_id", sa.Uuid(), nullable=False),
        sa.Column("format_id", sa.Uuid(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("eventbrite_event_id"),
    )
    op.create_index(
        "idx_eventbrite_events_coordinates", "eventbrite_events", ["coordinates"], unique=False, postgresql_using="gist"
    )
    op.create_table(
        "images",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("src", sa.String(), nullable=False),
        sa.Column("alt", sa.String(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "activity_images",
        sa.Column("activity_id", sa.Uuid(), nullable=False),
        sa.Column("image_id", sa.Uuid(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["activity_id"], ["activities.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["image_id"], ["images.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("activity_id", "image_id"),
    )
    op.create_table(
        "reserver_details",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("phone_number", sa.String(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["accounts.id"], name="account_id_reserver_details_fk", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("account_id", "id", name="account_id_id_pk"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "surveys",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("visitor_id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=True),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("search_area_ids", postgresql.ARRAY(sa.Uuid(), dimensions=1), nullable=False),
        sa.Column("budget", sa.String(), nullable=False),
        sa.Column("headcount", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], name="account_id_survey_fk", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "ticket_types",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("activity_id", sa.Uuid(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("base_cost_cents", sa.Integer(), nullable=False),
        sa.Column("service_fee_cents", sa.Integer(), nullable=False),
        sa.Column("tax_percentage", sa.Float(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["activity_id"], ["activities.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bookings",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("reserver_details_id", sa.Uuid(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["reserver_details_id"], ["reserver_details.id"], name="reserver_details_booking_fk", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "outings",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("visitor_id", sa.Uuid(), nullable=False),
        sa.Column("account_id", sa.Uuid(), nullable=True),
        sa.Column("survey_id", sa.Uuid(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], name="account_id_outing_fk", ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["survey_id"], ["surveys.id"], name="survey_id_outing_fk", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "account_bookings",
        sa.Column("account_id", sa.Uuid(), nullable=False),
        sa.Column("booking_id", sa.Uuid(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"], ["accounts.id"], name="account_id_account_booking_fk", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["booking_id"], ["bookings.id"], name="booking_id_account_booking_fk", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("account_id", "booking_id", name="account_booking_pivot_pk"),
    )
    op.create_index("account_booking_pivot_reverse_index", "account_bookings", ["booking_id"], unique=False)
    op.create_table(
        "booking_activity_templates",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("booking_id", sa.Uuid(), nullable=False),
        sa.Column("activity_name", sa.String(), nullable=False),
        sa.Column("activity_start_time", sa.DateTime(), nullable=False),
        sa.Column("num_attendees", sa.Integer(), nullable=False),
        sa.Column("external_booking_link", sa.String(), nullable=True),
        sa.Column("address", eave.core.orm.address_types.PostgisStdaddrColumnType(), nullable=False),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT", srid=4326, from_text="ST_GeogFromText", name="geography", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["booking_id"], ["bookings.id"], name="booking_id_booking_activity_template_fk", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("booking_id", "id", name="booking_activity_template_pk"),
    )
    op.create_index(
        "idx_booking_activity_templates_coordinates",
        "booking_activity_templates",
        ["coordinates"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_table(
        "booking_reservation_templates",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("booking_id", sa.Uuid(), nullable=False),
        sa.Column("reservation_name", sa.String(), nullable=False),
        sa.Column("reservation_start_time", sa.DateTime(), nullable=False),
        sa.Column("num_attendees", sa.Integer(), nullable=False),
        sa.Column("external_booking_link", sa.String(), nullable=True),
        sa.Column("address", eave.core.orm.address_types.PostgisStdaddrColumnType(), nullable=False),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT", srid=4326, from_text="ST_GeogFromText", name="geography", nullable=False
            ),
            nullable=False,
        ),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["booking_id"], ["bookings.id"], name="booking_id_booking_reservation_template_fk", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("booking_id", "id", name="booking_reservation_template_pk"),
    )
    op.create_index(
        "idx_booking_reservation_templates_coordinates",
        "booking_reservation_templates",
        ["coordinates"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_table(
        "outing_activities",
        sa.Column("outing_id", sa.Uuid(), nullable=False),
        sa.Column("activity_id", sa.String(), nullable=False),
        sa.Column("activity_source", sa.String(), nullable=False),
        sa.Column("activity_start_time", sa.DateTime(), nullable=False),
        sa.Column("num_attendees", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["outing_id"], ["outings.id"], name="outing_id_activity_pivot_fk", ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("outing_id", "activity_id", name="outing_activity_pivot_pk"),
    )
    op.create_table(
        "outing_reservations",
        sa.Column("outing_id", sa.Uuid(), nullable=False),
        sa.Column("reservation_id", sa.String(), nullable=False),
        sa.Column("reservation_source", sa.String(), nullable=False),
        sa.Column("reservation_start_time", sa.DateTime(), nullable=False),
        sa.Column("num_attendees", sa.Integer(), nullable=False),
        sa.Column("created", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["outing_id"], ["outings.id"], name="outing_id_reservation_pivot_fk", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("outing_id", "reservation_id", name="outing_reservation_pivot_pk"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
