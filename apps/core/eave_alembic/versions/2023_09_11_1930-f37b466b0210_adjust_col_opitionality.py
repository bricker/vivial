"""adjust col opitionality

Revision ID: f37b466b0210
Revises: be558c67008e
Create Date: 2023-09-11 19:30:32.038180

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f37b466b0210"
down_revision = "be558c67008e"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "resource_mutexes",
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("resource_id", sa.Uuid(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("resource_id"),
    )
    op.create_table(
        "teams",
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "document_platform",
            sa.Enum("eave", "confluence", "google_drive", name="documentplatform"),
            nullable=True,
        ),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.Column(
            "beta_whitelisted",
            sa.Boolean(),
            server_default=sa.text("false"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "accounts",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("visitor_id", sa.Uuid(), nullable=True),
        sa.Column(
            "opaque_utm_params",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "auth_provider",
            sa.Enum("google", "slack", "atlassian", "github", name="authprovider"),
            nullable=False,
        ),
        sa.Column("auth_id", sa.String(), nullable=False),
        sa.Column("oauth_token", sa.String(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
    )
    op.create_index(
        "auth_provider_auth_id",
        "accounts",
        ["auth_provider", "auth_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_accounts_auth_provider"),
        "accounts",
        ["auth_provider", "auth_id", "oauth_token"],
        unique=True,
    )
    op.create_table(
        "atlassian_installations",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("atlassian_site_name", sa.String(), nullable=True),
        sa.Column("atlassian_cloud_id", sa.String(), nullable=False),
        sa.Column("confluence_space", sa.String(), nullable=True),
        sa.Column("oauth_token_encoded", sa.String(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
        sa.UniqueConstraint("atlassian_cloud_id"),
    )
    op.create_index(
        "eave_team_id_atlassian_team_id",
        "atlassian_installations",
        ["team_id", "atlassian_cloud_id"],
        unique=True,
    )
    op.create_table(
        "connect_installations",
        sa.Column("team_id", sa.Uuid(), nullable=True),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column(
            "product",
            sa.Enum("jira", "confluence", name="atlassianproduct"),
            nullable=False,
        ),
        sa.Column("client_key", sa.String(), nullable=False),
        sa.Column("shared_secret", sa.String(), nullable=False),
        sa.Column("base_url", sa.String(), nullable=False),
        sa.Column("org_url", sa.String(), nullable=True),
        sa.Column("atlassian_actor_account_id", sa.String(), nullable=True),
        sa.Column("display_url", sa.String(), nullable=True),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_connect_installations_org_url"),
        "connect_installations",
        ["org_url"],
        unique=False,
    )
    op.create_index(
        op.f("ix_connect_installations_product"),
        "connect_installations",
        ["product", "client_key"],
        unique=True,
    )
    op.create_index(
        op.f("ix_connect_installations_team_id"),
        "connect_installations",
        ["team_id"],
        unique=False,
    )
    op.create_table(
        "document_references",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("document_id", sa.String(), nullable=False),
        sa.Column("document_url", sa.String(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
    )
    op.create_table(
        "github_installations",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("github_install_id", sa.String(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
    )
    op.create_index(
        "eave_team_id_github_install_id",
        "github_installations",
        ["team_id", "github_install_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_github_installations_github_install_id"),
        "github_installations",
        ["github_install_id"],
        unique=True,
    )
    op.create_table(
        "github_repos",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column("external_repo_id", sa.String(), nullable=False),
        sa.Column(
            "api_documentation_state",
            sa.String(),
            server_default="disabled",
            nullable=False,
        ),
        sa.Column(
            "inline_code_documentation_state",
            sa.String(),
            server_default="disabled",
            nullable=False,
        ),
        sa.Column(
            "architecture_documentation_state",
            sa.String(),
            server_default="disabled",
            nullable=False,
        ),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "external_repo_id"),
        sa.UniqueConstraint("external_repo_id"),
    )
    op.create_table(
        "slack_sources",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("slack_team_name", sa.String(), nullable=True),
        sa.Column("slack_team_id", sa.String(), nullable=False),
        sa.Column("bot_token", sa.String(), nullable=False),
        sa.Column("bot_token_exp", sa.DateTime(), nullable=True),
        sa.Column("bot_refresh_token", sa.String(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
    )
    op.create_index(
        op.f("ix_slack_sources_slack_team_id"),
        "slack_sources",
        ["slack_team_id"],
        unique=True,
    )
    op.create_index(
        "slack_team_id_eave_team_id",
        "slack_sources",
        ["team_id", "slack_team_id"],
        unique=True,
    )
    op.create_table(
        "confluence_destinations",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column("connect_installation_id", sa.Uuid(), nullable=False),
        sa.Column("space_key", sa.String(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["connect_installation_id"],
            ["connect_installations.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
    )
    op.create_table(
        "github_documents",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column("external_repo_id", sa.String(), nullable=False),
        sa.Column("pull_request_number", sa.Integer(), nullable=True),
        sa.Column("status", sa.String(), server_default="processing", nullable=False),
        sa.Column(
            "status_updated",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("file_path", sa.String(), nullable=True),
        sa.Column("api_name", sa.String(), nullable=True),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["external_repo_id"],
            ["github_repos.external_repo_id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "external_repo_id"),
    )
    op.create_table(
        "subscriptions",
        sa.Column("team_id", sa.Uuid(), nullable=False),
        sa.Column(
            "id",
            sa.Uuid(),
            server_default=sa.text("(gen_random_uuid())"),
            nullable=False,
        ),
        sa.Column(
            "source_platform",
            sa.Enum("slack", "github", "jira", name="subscriptionsourceplatform"),
            nullable=False,
        ),
        sa.Column(
            "source_event",
            sa.Enum(
                "slack_message",
                "github_file_change",
                "jira_issue_comment",
                name="subscriptionsourceevent",
            ),
            nullable=False,
        ),
        sa.Column("source_id", sa.String(), nullable=False),
        sa.Column("document_reference_id", sa.Uuid(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["team_id", "document_reference_id"],
            ["document_references.team_id", "document_references.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(["team_id"], ["teams.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("team_id", "id"),
    )
    op.create_index(
        "source_key",
        "subscriptions",
        ["team_id", "source_platform", "source_event", "source_id"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("source_key", table_name="subscriptions")
    op.drop_table("subscriptions")
    op.drop_table("github_documents")
    op.drop_table("confluence_destinations")
    op.drop_index("slack_team_id_eave_team_id", table_name="slack_sources")
    op.drop_index(op.f("ix_slack_sources_slack_team_id"), table_name="slack_sources")
    op.drop_table("slack_sources")
    op.drop_table("github_repos")
    op.drop_index(
        op.f("ix_github_installations_github_install_id"),
        table_name="github_installations",
    )
    op.drop_index("eave_team_id_github_install_id", table_name="github_installations")
    op.drop_table("github_installations")
    op.drop_table("document_references")
    op.drop_index(
        op.f("ix_connect_installations_team_id"),
        table_name="connect_installations",
    )
    op.drop_index(
        op.f("ix_connect_installations_product"),
        table_name="connect_installations",
    )
    op.drop_index(
        op.f("ix_connect_installations_org_url"),
        table_name="connect_installations",
    )
    op.drop_table("connect_installations")
    op.drop_index("eave_team_id_atlassian_team_id", table_name="atlassian_installations")
    op.drop_table("atlassian_installations")
    op.drop_index(op.f("ix_accounts_auth_provider"), table_name="accounts")
    op.drop_index("auth_provider_auth_id", table_name="accounts")
    op.drop_table("accounts")
    op.drop_table("teams")
    op.drop_table("resource_mutexes")
    # ### end Alembic commands ###
