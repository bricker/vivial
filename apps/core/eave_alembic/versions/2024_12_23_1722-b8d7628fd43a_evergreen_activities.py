"""evergreen activities

Revision ID: b8d7628fd43a
Revises: 769660a19595
Create Date: 2024-12-23 17:22:56.438740

"""

from alembic import op
import geoalchemy2
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from eave.core.orm.util.user_defined_column_types import AddressColumnType

# revision identifiers, used by Alembic.
revision = "b8d7628fd43a"
down_revision = "769660a19595"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_activities_coordinates", table_name="activities", postgresql_using="gist")
    op.drop_constraint("activity_images_activity_id_fkey", "activity_images", type_="foreignkey")
    op.drop_column("activity_images", "activity_id")
    op.drop_table("activities")
    op.drop_table("ticket_types")

    op.create_table(
        "evergreen_activities",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("activity_category_id", sa.Uuid(), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column("address", AddressColumnType(), nullable=False),
        sa.Column("is_bookable", sa.Boolean(), nullable=False),
        sa.Column("booking_url", sa.String(), nullable=True),
        sa.Column(
            "created", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("updated", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "coordinates",
            geoalchemy2.types.Geography(
                geometry_type="POINT", srid=4326, from_text="ST_GeogFromText", name="geography", nullable=False
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_evergreen_activities_coordinates",
        "evergreen_activities",
        ["coordinates"],
        unique=False,
        postgresql_using="gist",
    )
    op.create_table(
        "evergreen_activity_ticket_types",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("base_cost_cents", sa.Integer(), nullable=False),
        sa.Column("service_fee_cents", sa.Integer(), nullable=False),
        sa.Column("tax_percentage", sa.Float(), nullable=False),
        sa.Column("evergreen_activity_id", sa.Uuid(), nullable=False),
        sa.Column(
            "created", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("updated", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["evergreen_activity_id"], ["evergreen_activities.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "weekly_schedules",
        sa.Column("id", sa.Uuid(), server_default=sa.text("(gen_random_uuid())"), nullable=False),
        sa.Column("week_of", sa.DATE(), nullable=True),
        sa.Column("monday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("tuesday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("wednesday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("thursday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("friday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("saturday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("sunday", postgresql.INT4MULTIRANGE(), nullable=False),
        sa.Column("evergreen_activity_id", sa.Uuid(), nullable=False),
        sa.Column(
            "created", postgresql.TIMESTAMP(timezone=True), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False
        ),
        sa.Column("updated", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(["evergreen_activity_id"], ["evergreen_activities.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column("activity_images", sa.Column("evergreen_activity_id", sa.Uuid(), nullable=True))
    op.create_foreign_key(
        None, "activity_images", "evergreen_activities", ["evergreen_activity_id"], ["id"], ondelete="CASCADE"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
