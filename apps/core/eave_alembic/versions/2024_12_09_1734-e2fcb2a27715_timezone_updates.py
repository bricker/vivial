"""timezone updates

Revision ID: e2fcb2a27715
Revises: d720891e5e6b
Create Date: 2024-12-09 17:34:05.385080

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

import eave.core.orm.util.user_defined_column_types

# revision identifiers, used by Alembic.
revision = "e2fcb2a27715"
down_revision = "d720891e5e6b"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "account_bookings",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "account_bookings",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "accounts",
        "last_login",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "accounts",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "accounts",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "activities",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "activities",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "activity_images",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "activity_images",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.add_column("booking_activity_templates", sa.Column("name", sa.String(), nullable=False))
    op.add_column("booking_activity_templates", sa.Column("photo_uri", sa.String(), nullable=True))
    op.add_column("booking_activity_templates", sa.Column("headcount", sa.Integer(), nullable=False))
    op.add_column(
        "booking_activity_templates", sa.Column("start_time_utc", postgresql.TIMESTAMP(timezone=True), nullable=False)
    )
    op.add_column(
        "booking_activity_templates",
        sa.Column("timezone", eave.core.orm.util.user_defined_column_types.ZoneInfoColumnType(), nullable=False),
    )
    op.alter_column(
        "booking_activity_templates",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "booking_activity_templates",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("booking_activity_templates", "activity_photo_uri")
    op.drop_column("booking_activity_templates", "activity_name")
    op.drop_column("booking_activity_templates", "activity_start_time")
    op.drop_column("booking_activity_templates", "num_attendees")
    op.add_column("booking_reservation_templates", sa.Column("name", sa.String(), nullable=False))
    op.add_column("booking_reservation_templates", sa.Column("photo_uri", sa.String(), nullable=True))
    op.add_column("booking_reservation_templates", sa.Column("headcount", sa.Integer(), nullable=False))
    op.add_column(
        "booking_reservation_templates",
        sa.Column("start_time_utc", postgresql.TIMESTAMP(timezone=True), nullable=False),
    )
    op.add_column(
        "booking_reservation_templates",
        sa.Column("timezone", eave.core.orm.util.user_defined_column_types.ZoneInfoColumnType(), nullable=False),
    )
    op.alter_column(
        "booking_reservation_templates",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "booking_reservation_templates",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("booking_reservation_templates", "reservation_start_time")
    op.drop_column("booking_reservation_templates", "reservation_photo_uri")
    op.drop_column("booking_reservation_templates", "reservation_name")
    op.drop_column("booking_reservation_templates", "num_attendees")
    op.alter_column(
        "bookings",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "bookings",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.add_column("eventbrite_events", sa.Column("time_range_utc", postgresql.TSTZRANGE(), nullable=False))
    op.add_column(
        "eventbrite_events",
        sa.Column("timezone", eave.core.orm.util.user_defined_column_types.ZoneInfoColumnType(), nullable=False),
    )
    op.alter_column(
        "eventbrite_events",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "eventbrite_events",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("eventbrite_events", "time_range")
    op.alter_column(
        "images",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "images",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.add_column("outing_activities", sa.Column("source_id", sa.String(), nullable=False))
    op.add_column(
        "outing_activities",
        sa.Column("source", eave.core.orm.util.user_defined_column_types.ActivitySourceColumnType(), nullable=False),
    )
    op.add_column("outing_activities", sa.Column("headcount", sa.Integer(), nullable=False))
    op.add_column("outing_activities", sa.Column("start_time_utc", postgresql.TIMESTAMP(timezone=True), nullable=False))
    op.add_column(
        "outing_activities",
        sa.Column("timezone", eave.core.orm.util.user_defined_column_types.ZoneInfoColumnType(), nullable=False),
    )
    op.alter_column(
        "outing_activities",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "outing_activities",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("outing_activities", "num_attendees")
    op.drop_column("outing_activities", "activity_source")
    op.drop_column("outing_activities", "activity_start_time")
    op.drop_column("outing_activities", "activity_id")
    op.alter_column(
        "outing_preferences",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "outing_preferences",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.add_column("outing_reservations", sa.Column("source_id", sa.String(), nullable=False))
    op.add_column(
        "outing_reservations",
        sa.Column("source", eave.core.orm.util.user_defined_column_types.RestaurantSourceColumnType(), nullable=False),
    )
    op.add_column("outing_reservations", sa.Column("headcount", sa.Integer(), nullable=False))
    op.add_column(
        "outing_reservations", sa.Column("start_time_utc", postgresql.TIMESTAMP(timezone=True), nullable=False)
    )
    op.add_column(
        "outing_reservations",
        sa.Column("timezone", eave.core.orm.util.user_defined_column_types.ZoneInfoColumnType(), nullable=False),
    )
    op.alter_column(
        "outing_reservations",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "outing_reservations",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("outing_reservations", "reservation_start_time")
    op.drop_column("outing_reservations", "num_attendees")
    op.drop_column("outing_reservations", "reservation_id")
    op.drop_column("outing_reservations", "reservation_source")
    op.alter_column(
        "outings",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "outings",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "reserver_details",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "reserver_details",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.add_column("surveys", sa.Column("start_time_utc", postgresql.TIMESTAMP(timezone=True), nullable=False))
    op.add_column(
        "surveys",
        sa.Column("timezone", eave.core.orm.util.user_defined_column_types.ZoneInfoColumnType(), nullable=False),
    )
    op.alter_column(
        "surveys",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "surveys",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.drop_column("surveys", "start_time")
    op.alter_column(
        "ticket_types",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),  # type: ignore
    )
    op.alter_column(
        "ticket_types",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
