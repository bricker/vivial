#!/usr/bin/env bash

set -eu

source "$EAVE_HOME"/develop/functions.bash

function _print_help() (
		statusmsg -o "Usage: cloud-sql-proxy -i instancename [-s serviceaccount]"
		statusmsg -o "  -i instance_name: Required: The instance name."
		statusmsg -o "  -s service_account_name: Optional: The service account name to impersonate, up to @."
		statusmsg -o "       Eg: for 'gsa-app-core-api@eave-staging.iam.gserviceaccount.com', pass 'gsa-app-core-api'."
		statusmsg -o "       If this option is omitted, gcloud CLI auth will be used."
		statusmsg -o "  -h : Print this message."
)

function run-cloud-sql-proxy() (
	local instancename=""
	local serviceaccount=""

	while getopts "i:s:h" argname; do
		case "$argname" in
		i) instancename=$OPTARG ;;
		s) serviceaccount=$OPTARG ;;
		h)
			_print_help
			exit 0
			;;
		*)
			statusmsg -e "unknown option: $argname"
			_print_help
			exit 1
			;;
		esac
	done

	if test -z "$instancename"; then
		_print_help
		exit 1
	fi

	local gcloudproject; gcloudproject="$(^gcloudproject)"

	if ! ^cmd-exists "cloud-sql-proxy"; then
		statusmsg -pa "Downloading and installing the Cloud SQL Proxy for your system."
		statusmsg -i "Cloud SQL Proxy is used to connect to Cloud SQL from your local machine using IAM auth."

		if ^confirm; then
			(
				cd "$(mktemp -d)"
				if ^cmd-exists "gcloud"; then
					cloudsqlproxypath=$(dirname "$(which gcloud)")
				else
					cloudsqlproxypath="/usr/local/bin"
				fi

				local proxyversion="2.2.0"
				local arch
				arch=$(get-cpu-arch-normalized-alt)

				curl -o cloud-sql-proxy "https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v$proxyversion/cloud-sql-proxy.$kernel.$arch"
				# see if we got an error back instead of binary content
				if test "$(head -n1 cloud-sql-proxy | cut -c 3-5)" = "xml"; then
					statusmsg -e "Error downloading cloud-sql-proxy:"
					cat cloud-sql-proxy
					rm cloud-sql-proxy
					return 1
				fi
				chmod +x cloud-sql-proxy

				statusmsg -w "sudo privileges are needed to move the cloud-sql-proxy program into $cloudsqlproxypath"
				sudo mv cloud-sql-proxy "$cloudsqlproxypath"
			)
		fi
	fi

	# unix socket path names must be less than 108 characters long
	# https://github.com/GoogleCloudPlatform/cloud-sql-proxy/issues/970
	# so we'll put our socketdir close to root to keep the path short
	local socketdir="${XDG_RUNTIME_DIR:-/tmp}/.cloudsqlproxy"
	mkdir -p "$socketdir"

	local connectionName
	connectionName=$(gcloud --project "$gcloudproject" --format json sql instances list --filter="state=RUNNABLE" | jq -r ".[] | select(.name == \"$instancename\") | first(.) | .connectionName")

	if test -z "$connectionName"; then
		statusmsg -e "gcloud command failed. Cannot connect to Cloud SQL."
		exit 1
	fi

	local username
	local impersonateopt=""
	if test -n "$serviceaccount"; then
		username="$serviceaccount@$gcloudproject.iam.gserviceaccount.com"
		impersonateopt="--impersonate-service-account $username"
	else
		username=$(gcloud --project "$gcloudproject" --format json info | jq -r .config.account)
	fi

	statusmsg -s "Connecting to CloudSQL as $username via $connectionName"
	# shellcheck disable=SC2086
	cloud-sql-proxy "$connectionName" \
		$impersonateopt \
		--auto-iam-authn \
		--unix-socket "$socketdir"
		# --http-port=9090 \
		# --health-check
		# --port 5431
)

run-cloud-sql-proxy "$@"
