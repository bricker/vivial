#!/usr/bin/env bash

shopt -s globstar

bashversion="${BASH_VERSINFO:0}"

if test "$bashversion" -lt 5; then
	echo "ERROR: Bash version 5 or higher is required to run Eave development scripts."
	echo "Your version is $bashversion"
	echo "On macOS, you can use Homebrew to install a more recent version of bash. Try 'brew install bash'."
	echo "On other operating systems, use your standard package management, eg 'sudo apt install bash'."
	exit 1
fi

if test -z "${EAVE_HOME}"; then
	export EAVE_HOME
	EAVE_HOME=$(pwd)
fi

source "${EAVE_HOME}/develop/functions.bash"

kernel=$(e.get-kernel-name)
opsys=$(e.get-os)
tmpdir=/tmp/eave-setup
mkdir -p $tmpdir

function setenvvars() (
	if ! e.force && test -n "$XDG_CONFIG_HOME"; then
		statusmsg -o "XDG_CONFIG_HOME already set."
	else
		local value="\$HOME/.config"
		statusmsg -pa "Adding XDG_CONFIG_HOME=$value to your environment."
		statusmsg -i "XDG_CONFIG_HOME is a standard environment variable that many programs use to store configuration."
		if e.confirm; then
			e.add-shell-variable XDG_CONFIG_HOME "$value"
		fi
	fi

	if ! e.force && test -n "$XDG_DATA_HOME"; then
		statusmsg -o "XDG_DATA_HOME already set."
	else
		local value="\$HOME/.local/share"
		statusmsg -pa "Adding XDG_DATA_HOME=$value to your environment."
		statusmsg -i "XDG_DATA_HOME is a standard environment variable that many programs use to store data."
		if e.confirm; then
			e.add-shell-variable XDG_DATA_HOME "$value"
		fi
	fi

	if ! e.force && test -n "$XDG_RUNTIME_DIR"; then
		statusmsg -o "XDG_RUNTIME_DIR already set."
	else
		local value="/run/user/1000"
		statusmsg -pa "Adding XDG_RUNTIME_DIR=$value to your environment."
		statusmsg -i "XDG_RUNTIME_DIR is a standard environment variable that many programs use to store Unix sockets."
		if e.confirm; then
			e.add-shell-variable XDG_RUNTIME_DIR "$value"
		fi
	fi

	# since EAVE_HOME is locally exported at the top of the file,
	# it will never be empty even when not saved in env/login file.
	# So we'll always set it here.
	local value
	value=$(pwd)
	statusmsg -pa "Adding EAVE_HOME=$value to your environment."
	statusmsg -i "EAVE_HOME is the root of the Eave monorepo, and is used all over the place when loading files."
	if e.confirm; then
		e.add-shell-variable EAVE_HOME "$value"
	fi
)

function setuppython() (
	statusmsg -pa "Setting up Python virtual environment"
	if e.confirm; then
		if ! e.cmd-exists pyenv; then
			pythonpath="$(which python)"
			statusmsg -w "It is recommended to install and use pyenv to manage the python version for this project."
			statusmsg -w "With pyenv installed, this project can automatically install and select the correct python version."
			statusmsg -w "pyenv was not found on your system; proceeding with the available python executable ($pythonpath)."
		else
			pyenv install -s

			if test "$?" -ne 0; then
				statusmsg -e "pyenv install failed."
				statusmsg -i "Often this is due to a missing or invalid dependency. Check the following resources for potential fixes:"
				statusmsg -i "* Suggested build environment: https://github.com/pyenv/pyenv/wiki#suggested-build-environment"
				statusmsg -i "* \"cannot stat 'Modules/_crypt'\" (or similar): https://github.com/pyenv/pyenv/issues/2823#issuecomment-1769081965"
			fi

			pyenv version
		fi

		# Fix pip cache error: https://stackoverflow.com/a/77298334/885036
		rm -rf "${HOME}/.cache/pip/selfcheck"
		rm -rf "${HOME}/Library/Caches/pip/selfcheck"

		local ved="$EAVE_HOME/.venv"
		rm -rf "$ved"

		python -m venv --upgrade-deps "$ved"
		python-activate-venv

		# shellcheck disable=SC2086
		python -m pip install -r "$EAVE_HOME/requirements-dev.txt"
	fi
)

function setupnode() (
	statusmsg -pa "Setting up Node virtual environment"
	if e.confirm; then
		node-activate-venv
		rm -rf node_modules
		npm install
	fi
)

function setupgcloud() (
	if ! e.force && e.cmd-exists "gcloud"; then
		statusmsg -o "gcloud CLI already installed."
	else
		statusmsg -pa "Downloading and installing the gcloud CLI into $HOME/google-cloud-sdk."
		statusmsg -i "The gcloud CLI connects your local machine to our Google Cloud project, and is used in many development scripts."
		if e.confirm; then
			cd "$tmpdir" || exit 1
			local gcloudversion="426.0.0"
			local arch
			arch=$(e.get-cpu-arch-normalized)
			local filename="google-cloud-cli-$gcloudversion-$kernel-$arch.tar.gz"
			curl -O "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/$filename"
			tar -xf "$filename"
			mv google-cloud-sdk "$HOME"
			cd "$HOME" || exit 1
			./google-cloud-sdk/install.sh
			gcloud auth application-default login
		fi
	fi
)

function installterraform() (
	if ! e.force && e.cmd-exists "terraform"; then
		statusmsg -o "terraform already installed."
	else
		statusmsg -pa "Installing the 'terraform' command line utility."
		statusmsg -i "The terraform CLI is used in various utility scripts in this repository."

		if e.confirm; then
			case "$kernel" in
			"linux")
				case "$opsys" in
				"ubuntu")
					statusmsg -w "sudo privileges are needed to install terraform via apt"
					sudo apt install terraform
					;;
				"manjarolinux")
					statusmsg -w "sudo privileges are needed to install terraform via pacman"
					sudo pacman -S terraform
					;;
				*)
					statusmsg -e "Your operating system $opsys isn't supported. Please add support to this script!"
					;;
				esac
				;;

			"darwin")
				if e.cmd-exists "brew"; then
					brew install terraform
				else
					statusmsg -e "command 'brew' not found. Install homebrew if you want to, and re-run this script."
				fi
				;;
			esac
		fi
	fi
)

function installjq() (
	if ! e.force && e.cmd-exists "jq"; then
		statusmsg -o "jq already installed."
	else
		statusmsg -pa "Installing the 'jq' command line utility."
		statusmsg -i "The jq program is used in many utility scripts in this repository."

		if e.confirm; then
			case "$kernel" in
			"linux")
				case "$opsys" in
				"ubuntu")
					statusmsg -w "sudo privileges are needed to install jq via apt"
					sudo apt install jq
					;;
				"manjarolinux")
					statusmsg -w "sudo privileges are needed to install jq via pacman"
					sudo pacman -S jq
					;;
				*)
					statusmsg -e "Your operating system $opsys isn't supported. Please add support to this script!"
					;;
				esac
				;;

			"darwin")
				if e.cmd-exists "brew"; then
					brew install jq
				else
					statusmsg -e "command 'brew' not found. Install homebrew if you want to, and re-run this script."
				fi
				;;
			esac
		fi
	fi
)

function installyq() (
	if ! e.force && e.cmd-exists "yq"; then
		statusmsg -o "yq already installed."
	else
		statusmsg -pa "Installing the 'yq' command line utility."
		statusmsg -i "The yq program is used to parse Google Cloud configuration files (eg app.yaml and build.yaml)"

		if e.confirm; then
			if e.cmd-exists "brew"; then
				brew install yq
			else
				statusmsg -e "yq is installed via Homebrew, which wasn't found in your PATH."
				statusmsg -e "Install homebrew and re-run this script, or install 'yq' manually (it may be available in your operating system's package repositories)."
			fi
		fi
	fi
)

function installshfmt() (
	if ! e.force && e.cmd-exists "shfmt"; then
		statusmsg -o "shfmt already installed."
	else
		statusmsg -pa "Installing the 'shfmt' command line utility."
		statusmsg -i "The shfmt program is used to auto-format shell scripts"

		if e.confirm; then
			if e.cmd-exists "brew"; then
				brew install shfmt
			else
				statusmsg -e "shfmt is installed via Homebrew, which wasn't found in your PATH."
				statusmsg -e "Install homebrew and re-run this script, or install 'shfmt' manually (it may be available in your operating system's package repositories)."
			fi
		fi
	fi
)

function installshellcheck() (
	if ! e.force && e.cmd-exists "shellcheck"; then
		statusmsg -o "shellcheck already installed."
	else
		statusmsg -pa "Installing the 'shellcheck' command line utility."
		statusmsg -i "The shellcheck program is used to lint shell scripts"

		if e.confirm; then
			if e.cmd-exists "brew"; then
				brew install shellcheck
			else
				statusmsg -e "shellcheck is installed via Homebrew, which wasn't found in your PATH."
				statusmsg -e "Install homebrew and re-run this script, or install 'shellcheck' manually (it may be available in your operating system's package repositories)."
			fi
		fi
	fi
)

function installcerts() (
	statusmsg -pa "Installing self-signed dev certs."
	if e.confirm; then
		if ! cd "${EAVE_HOME}/develop/certs"; then
			statusmsg -e "Failed to enter ${EAVE_HOME}/develop/certs/ directory. It may have moved?"
			statusmsg -w "Running Eave web app locally may not work as expected until dev certs are installed"
			exit 1
		fi
		# install to machine (browser may require extra steps)
		./bin/install-certs
	fi
)

function setupapps() (
	statusmsg -pa "Running setup scripts in develop, libs, packages, and apps."

	if e.confirm; then
		cd "${EAVE_HOME}" || exit 1
		python-activate-venv
		node-activate-venv

		for ss in {apps,libs,packages,develop,terraform}/**/bin/setup; do
			if e.norecurse "$ss"; then
				continue
			fi
			statusmsg -d "Running $ss"
			_ONLY_THIS_MODULE=1 $ss
		done
	fi
)

function _helpmsg() (
	statusmsg -o "Usage: bin/setup [-f] [-y]"
	statusmsg -o "  -f : force (bypass checks for existing tools)"
	statusmsg -o "  -y : no prompts (automatically answer Y to all prompts)"
)

function main() (
	while getopts "fyh" argname; do
		case "$argname" in
		f)
			export FORCE=1
			;;
		y)
			export NOPROMPT=1
			;;
		h)
			_helpmsg
			exit 0
			;;
		*)
			_helpmsg
			exit 1
			;;
		esac
	done

	statusmsg -ps "Hi! Welcome to Eave. This script will help you setup this repository."
	statusmsg -pi "Before getting started, it is recommended to manually install a few things if you haven't already:"
	statusmsg -pi "* homebrew (https://brew.sh) - common package manager"
	statusmsg -pi "* nvm (https://github.com/nvm-sh/nvm) - node version management (NOTE: These scripts assume nvm for BASH is installed)"
	statusmsg -pi "* pyenv (https://github.com/pyenv/pyenv) - python version management"

	echo ""

	setenvvars
	setuppython
	setupnode
	setupgcloud
	installjq
	installyq
	installterraform
	installshfmt
	installshellcheck
	installcerts
	setupapps

	statusmsg -s "Done!"
	statusmsg -s "Now, open EAVE_HOME (this directory) in VSCode (recommended) and you're ready to go. (Hint: try \`code .\`)"
)

main "$@"
