#!/usr/bin/env bash

if test -z "${EAVE_HOME}"; then
	export EAVE_HOME=$(pwd)
fi

source ${EAVE_HOME}/develop/functions.bash

statusmsg -ps "Hi! Welcome to Eave. I will help you setup this repository."
statusmsg -i "Before getting started, it is recommended to install the "nvm" and "pyenv" version management tools into your environment."

echo ""

usershell=$(shellname)
kernel=$(get-kernel-name)
opsys=$(get-os)
tmpdir=/tmp/eave-setup
mkdir -p $tmpdir

case $usershell in
"bash" | "zsh")
	loginfile=$(shloginfile)
	varcmd="export EAVE_HOME=\"$(pwd)\""
	statusmsg -pi "First, I'll add the following line to $loginfile:"
	echo ""
	statusmsg -o "\t$varcmd"
	echo ""

	read -p "Should I proceed? [y/n] " proceed
	if test "$proceed" = "y"; then
		echo -e "\n$varcmd" >>"$loginfile"
	fi

	statusmsg "Updating current shell to set EAVE_HOME"
	source "$loginfile"
	;;
"fish")
	varcmd="set -Ux EAVE_HOME $(pwd)"
	statusmsg -pi "First, I'll add a Universal variable to your Fish environment with the following command:"
	echo ""
	echo -e "\t$varcmd"
	echo ""

	read -p "Should I proceed? [y/n] " proceed
	if test "$proceed" = "y"; then
		fish -c "$varcmd"
	fi
	;;
*)
	statusmsg -w "Your shell ($usershell) isn't supported by this script. Please update this script to add support!"
	;;
esac

echo ""

function setuppython() {
	if ! cmd-exists pyenv; then
		pythonversion="$(python --version)"
		pythonpath="$(which python)"
		statusmsg -w "It is recommended to install and use pyenv to manage the python version for this project."
		statusmsg -w "With pyenv installed, this project can automatically install and select the correct python version."
		statusmsg -w "I did not find pyenv, so I will proceed with the available python executable ($pythonpath)."
	else
		pyenv install -s
		pyenv version
	fi

	python -m venv --clear --upgrade-deps .venv
	python-activate-venv
}

statusmsg -pi "Next, I will setup the python virtual environment."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setuppython
fi
echo ""

function setupgcloud() {
	cd $tmpdir

	local gcloudversion="426.0.0"
	local arch=$(get-cpu-arch-normalized)
	local filename="google-cloud-cli-$gcloudversion-$kernel-$arch.tar.gz"
	curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/$filename
	tar -xf $filename
	mv google-cloud-sdk $HOME
	cd $HOME
	./google-cloud-sdk/install.sh
	gcloud auth application-default login
}

statusmsg -pi "OK! Now I'm going to download and install the gcloud CLI into $HOME/google-cloud-sdk."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setupgcloud
fi
echo ""

function setupcloudsqlproxy() {
	cd $tmpdir

	if cmd-exists "gcloud"; then
		cloudsqlproxypath=$(dirname $(which gcloud))
	else
		cloudsqlproxypath="/usr/local/bin"
	fi

	local proxyversion="2.2.0"
	local arch=$(get-cpu-arch-normalized-alt)

	curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v$proxyversion/cloud-sql-proxy.$kernel.$arch
	# see if we got an error back instead of binary content
	if test "$(head -n1 cloud-sql-proxy | cut -c 3-5)" = "xml"; then
		statusmsg -e "Error downloading cloud-sql-proxy:"
		cat cloud-sql-proxy
		rm cloud-sql-proxy
		return
	fi
	chmod +x cloud-sql-proxy

	statusmsg -w "sudo privileges are needed to move the cloud-sql-proxy program into $cloudsqlproxypath"
	sudo mv cloud-sql-proxy $cloudsqlproxypath
}

statusmsg -pi "Now I'll download and install the Cloud SQL Proxy for your system."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setupcloudsqlproxy
fi
echo ""

function install-jq() {
	case "$kernel" in
	"linux")
		case "$opsys" in
		"ubuntu")
			statusmsg -w "sudo privileges are needed to install jq via apt"
			sudo apt install jq
			;;
		"manjarolinux")
			statusmsg -w "sudo privileges are needed to install jq via pacman"
			sudo pacman -S jq
			;;
		*)
			statusmsg -e "Your operating system isn't supported. Please add support to this script!"
			;;
		esac
		;;

	"darwin")
		if cmd-exists "brew"; then
			brew install jq
		else
			statusmsg -e "command 'brew' not found. Install homebrew if you want to, and re-run this script."
		fi
		;;
	esac
}

if ! cmd-exists "jq"; then
	statusmsg -pi "The jq program is used (and assumed to be installed) in many utility scripts in this repository."
	read -p "Do you want me to install it? [y/n] " proceed
	if test "$proceed" = "y"; then
		install-jq
	fi
	echo ""
fi

function setupapps() {
	cd ${EAVE_HOME}
	statusmsg -pi "Setting up shared dev dependencies"
	(cd ${EAVE_HOME}/develop/javascript/eslint/ && bin/setup)

	python-activate-venv
	python -m pip install -r develop/requirements-dev.txt
	run-in-all-projects bin/setup
}

statusmsg -pi "Next, I'm going to visit each of the app and lib directories and run the setup script for each one."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setupapps
fi
echo ""

statusmsg -s "Done!"
statusmsg -i "Now, open EAVE_HOME (this directory) in VSCode and you're ready to go. (Hint: try \`code .\`)"
