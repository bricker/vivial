#!/usr/bin/env bash

if test -z "${EAVE_HOME}"; then
	export EAVE_HOME=$(pwd)
fi

source ${EAVE_HOME}/develop/functions.bash

statusmsg -ns "Hi! Welcome to Eave. I will help you setup this repository."
statusmsg -i "Before getting started, it is recommended to install the "nvm" and "pyenv" version management tools into your environment."

echo ""

usershell=$(shellname)

case $usershell in
"bash" | "zsh")
	case $usershell in
	"bash") loginfile=~/.bashrc ;;
	"zsh") loginfile=~/.zshrc ;;
	esac
	varcmd="export EAVE_HOME=\"$(pwd)\""
	statusmsg -ni "First, I'll add the following line to $loginfile:"
	echo ""
	statusmsg -o "\t$varcmd"
	echo ""

	read -p "Should I proceed? [y/n] " proceed
	if test "$proceed" = "y"; then
		echo -e "\n$varcmd" >>"$loginfile"
	fi

	statusmsg "Updating current shell to set EAVE_HOME"
	source "$loginfile"
	;;
"fish")
	varcmd="set -Ux EAVE_HOME $(pwd)"
	statusmsg -ni "First, I'll add a Universal variable to your Fish environment with the following command:"
	echo ""
	echo -e "\t$varcmd"
	echo ""

	read -p "Should I proceed? [y/n] " proceed
	if test "$proceed" = "y"; then
		fish -c "$varcmd"
	fi
	;;
*)
	statusmsg -w "Your shell ($usershell) isn't supported by this script. Please update this script to add support!"
	;;
esac

echo ""

statusmsg -ni "Next, I will setup the python virtual environment."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"
then
	if ! command_exists pyenv
	then
		pythonversion="$(python --version)"
		pythonpath="$(which python)"
		statusmsg -w "It is recommended to install and use pyenv to manage the python version for this project."
		statusmsg -w "With pyenv installed, this project can automatically install and select the correct python version."
		statusmsg -w "I did not find pyenv, so I will proceed with the available python executable ($pythonpath)."
	else
		pyenv install -s
		pyenv version
	fi

	python -m venv --clear --upgrade-deps .venv
	python-activate-venv
fi

statusmsg -ni "Next, I'm going to visit each of the app and lib directories and run the setup script for each one."

read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	statusmsg -ni "Setting up shared dev dependencies"
	(cd ${EAVE_HOME}/develop/javascript/eslint/ && bin/setup)
	python-activate-venv
	python -m pip install -r develop/requirements-dev.txt
	run-in-all-projects bin/setup
fi

statusmsg -s "Done!"

statusmsg -i "Now, open EAVE_HOME (this directory) in VSCode and you're ready to go."
