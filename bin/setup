#!/usr/bin/env bash

shopt -s globstar

bashversion="${BASH_VERSINFO:0}"

if test "$bashversion" -lt 5; then
	echo "ERROR: Bash version 5 or higher is required to run Eave development scripts."
	echo "Your version is $bashversion"
	echo "On macOS, you can use Homebrew to install a more recent version of bash. Try 'brew install bash'."
	echo "On other operating systems, use your standard package management, eg 'sudo apt install bash'."
	exit 1
fi

if test -z "${EAVE_HOME}"; then
	export EAVE_HOME
	EAVE_HOME=$(pwd)
fi

source "${EAVE_HOME}/develop/functions.bash"

function ^ask() (
	statusmsg -wpn "Should I proceed? [y/n] "
	read -r proceed
	test "$proceed" = "y"
)

function ^force() {
	test -n "$FORCE"
}

usershell=$(shellname)
kernel=$(get-kernel-name)
opsys=$(get-os)
tmpdir=/tmp/eave-setup
mkdir -p $tmpdir

function setenvvars() (
	if ! ^force && test -n "$XDG_CONFIG_HOME"; then
		statusmsg -o "XDG_CONFIG_HOME already set."
	else
		local value="\$HOME/.config"
		statusmsg -pa "Adding XDG_CONFIG_HOME=$value to your environment."
		statusmsg -i "XDG_CONFIG_HOME is a standard environment variable that many programs use to store configuration."
		if ^ask; then
			^add-shell-variable XDG_CONFIG_HOME "$value"
		fi
	fi

	if ! ^force && test -n "$XDG_DATA_HOME"; then
		statusmsg -o "XDG_DATA_HOME already set."
	else
		local value="\$HOME/.local/share"
		statusmsg -pa "Adding XDG_DATA_HOME=$value to your environment."
		statusmsg -i "XDG_DATA_HOME is a standard environment variable that many programs use to store data."
		if ^ask; then
			^add-shell-variable XDG_DATA_HOME "$value"
		fi
	fi

	if ! ^force && test -n "$XDG_RUNTIME_DIR"; then
		statusmsg -o "XDG_RUNTIME_DIR already set."
	else
		local value="/run/user/1000"
		statusmsg -pa "Adding XDG_RUNTIME_DIR=$value to your environment."
		statusmsg -i "XDG_RUNTIME_DIR is a standard environment variable that many programs use to store Unix sockets."
		if ^ask; then
			^add-shell-variable XDG_RUNTIME_DIR "$value"
		fi
	fi

	if ! ^force && test -n "$EAVE_HOME"; then
		statusmsg -o "EAVE_HOME already set."
	else
		local value
		value=$(pwd)
		statusmsg -pa "Adding EAVE_HOME=$value to your environment."
		statusmsg -i "EAVE_HOME is the root of the Eave monorepo, and is used all over the place when loading files."
		if ^ask; then
			^add-shell-variable EAVE_HOME "$value"
		fi
	fi
)

function setuppython() (
	statusmsg -pa "Setting up Python virtual environment"
	if ! ^cmd-exists pyenv; then
		pythonpath="$(which python)"
		statusmsg -w "It is recommended to install and use pyenv to manage the python version for this project."
		statusmsg -w "With pyenv installed, this project can automatically install and select the correct python version."
		statusmsg -w "I did not find pyenv, so I will proceed with the available python executable ($pythonpath)."
	else
		pyenv install -s
		pyenv version
	fi

	python -m venv --clear --upgrade-deps "$EAVE_HOME/.venv"
	python-activate-venv

	# shellcheck disable=SC2086
	python -m pip install -r "$EAVE_HOME/requirements-dev.txt"
)

function setupnode() (
	statusmsg -pa "Setting up Node virtual environment"
	node-activate-venv
	rm -rf node_modules
	npm install
)

function setupgcloud() (
	if ! ^force && ^cmd-exists "gcloud"; then
		statusmsg -o "gcloud CLI already installed."
	else
		statusmsg -pa "Downloading and installing the gcloud CLI into $HOME/google-cloud-sdk."
		statusmsg -i "The gcloud CLI connects your local machine to our Google Cloud project, and is used in many development scripts."
		if ^ask; then
			cd "$tmpdir" || exit 1
			local gcloudversion="426.0.0"
			local arch
			arch=$(get-cpu-arch-normalized)
			local filename="google-cloud-cli-$gcloudversion-$kernel-$arch.tar.gz"
			curl -O "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/$filename"
			tar -xf "$filename"
			mv google-cloud-sdk "$HOME"
			cd "$HOME" || exit 1
			./google-cloud-sdk/install.sh
			gcloud auth application-default login
		fi
	fi
)

function setupcloudsqlproxy() (
	if ! ^force && ^cmd-exists "cloud-sql-proxy"; then
		statusmsg -o "CloudSQL Proxy already installed."
	else
		statusmsg -pa "Downloading and installing the Cloud SQL Proxy for your system."
		statusmsg -i "Cloud SQL Proxy is used to connect to Cloud SQL from your local machine using IAM auth."
		if ^ask; then
			cd "$tmpdir" || exit 1
			if ^cmd-exists "gcloud"; then
				cloudsqlproxypath=$(dirname "$(which gcloud)")
			else
				cloudsqlproxypath="/usr/local/bin"
			fi

			local proxyversion="2.2.0"
			local arch
			arch=$(get-cpu-arch-normalized-alt)

			curl -o cloud-sql-proxy "https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v$proxyversion/cloud-sql-proxy.$kernel.$arch"
			# see if we got an error back instead of binary content
			if test "$(head -n1 cloud-sql-proxy | cut -c 3-5)" = "xml"; then
				statusmsg -e "Error downloading cloud-sql-proxy:"
				cat cloud-sql-proxy
				rm cloud-sql-proxy
				return 1
			fi
			chmod +x cloud-sql-proxy

			statusmsg -w "sudo privileges are needed to move the cloud-sql-proxy program into $cloudsqlproxypath"
			sudo mv cloud-sql-proxy "$cloudsqlproxypath"
		fi
	fi
)

function installjq() (
	if ! ^force && ^cmd-exists "jq"; then
		statusmsg -o "jq already installed."
	else
		statusmsg -pa "Installing the 'jq' command line utility."
		statusmsg -i "The jq program is used in many utility scripts in this repository."

		if ^ask; then
			case "$kernel" in
			"linux")
				case "$opsys" in
				"ubuntu")
					statusmsg -w "sudo privileges are needed to install jq via apt"
					sudo apt install jq
					;;
				"manjarolinux")
					statusmsg -w "sudo privileges are needed to install jq via pacman"
					sudo pacman -S jq
					;;
				*)
					statusmsg -e "Your operating system $opsys isn't supported. Please add support to this script!"
					;;
				esac
				;;

			"darwin")
				if ^cmd-exists "brew"; then
					brew install jq
				else
					statusmsg -e "command 'brew' not found. Install homebrew if you want to, and re-run this script."
				fi
				;;
			esac
		fi
	fi
)

function installyq() (
	if ! ^force && ^cmd-exists "yq"; then
		statusmsg -o "yq already installed."
	else
		statusmsg -pa "Installing the 'yq' command line utility."
		statusmsg -i "The yq program is used to parse Google Cloud configuration files (eg app.yaml and build.yaml)"

		if ^ask; then
			if ^cmd-exists "brew"; then
				brew install yq
			else
				statusmsg -e "yq is installed via Homebrew, which wasn't found in your PATH."
				statusmsg -e "Install homebrew and re-run this script, or install 'yq' manually (it may be available in your operating system's package repositories)."
			fi
		fi
	fi
)

function installshfmt() (
	if ! ^force && ^cmd-exists "shfmt"; then
		statusmsg -o "shfmt already installed."
	else
		statusmsg -pa "Installing the 'shfmt' command line utility."
		statusmsg -i "The shfmt program is used to auto-format shell scripts"

		if ^ask; then
			if ^cmd-exists "brew"; then
				brew install shfmt
			else
				statusmsg -e "shfmt is installed via Homebrew, which wasn't found in your PATH."
				statusmsg -e "Install homebrew and re-run this script, or install 'shfmt' manually (it may be available in your operating system's package repositories)."
			fi
		fi
	fi
)

function installshellcheck() (
	if ! ^force && ^cmd-exists "shellcheck"; then
		statusmsg -o "shellcheck already installed."
	else
		statusmsg -pa "Installing the 'shellcheck' command line utility."
		statusmsg -i "The shellcheck program is used to lint shell scripts"

		if ^ask; then
			if ^cmd-exists "brew"; then
				brew install shellcheck
			else
				statusmsg -e "shellcheck is installed via Homebrew, which wasn't found in your PATH."
				statusmsg -e "Install homebrew and re-run this script, or install 'shellcheck' manually (it may be available in your operating system's package repositories)."
			fi
		fi
	fi
)

function setupapps() (
	statusmsg -pa "Running setup scripts in develop, libs, and apps."

	if ^ask; then
		cd "${EAVE_HOME}" || exit 1
		python-activate-venv
		node-activate-venv

		for ss in {apps,libs,develop}/**/bin/setup; do
			if ^norecurse "$ss"; then
				continue
			fi
			statusmsg -d "Running $ss"
			$ss
		done
	fi
)

statusmsg -ps "Hi! Welcome to Eave. I will help you setup this repository."
statusmsg -i "Before getting started, it is recommended to manually install a few things if you haven't already:"
statusmsg -i "* homebrew - https://brew.sh/"
statusmsg -i "* nvm - https://github.com/nvm-sh/nvm (sh) or https://github.com/jorgebucaran/nvm.fish (fish)"
statusmsg -i "* pyenv - https://github.com/pyenv/pyenv node version management.  and \"pyenv\" version management tools into your environment."

echo ""

setenvvars
setuppython
setupnode
setupgcloud
setupcloudsqlproxy
installjq
installyq
installshfmt
installshellcheck
setupapps

statusmsg -s "Done!"
statusmsg -i "Now, open EAVE_HOME (this directory) in VSCode and you're ready to go. (Hint: try \`code .\`)"
