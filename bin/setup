#!/usr/bin/env bash

source ./develop/shared/functions.bash
source ./develop/python/functions.bash

statusmsg -ns "Hi! Welcome to Eave. I will help you setup this repository."
statusmsg -i "Before getting started, it is recommended to install the "nvm" and "pyenv" version management tools into your environment."

echo ""

usershell=$(shellname)
kernel=$(get_kernel)
tmpdir=/tmp/eave-setup
mkdir -p $tmpdir

if [[ -z "$EAVE_HOME" ]]; then
	case $usershell in
	"bash" | "zsh")
		loginfile=$(shloginfile)
		varcmd="export EAVE_HOME=\"$(pwd)\""
		statusmsg -ni "First, I'll add the following line to $loginfile:"
		echo ""
		statusmsg -o "\t$varcmd"
		echo ""

		read -p "Should I proceed? [y/n] " proceed
		if test "$proceed" = "y"; then
			echo -e "\n$varcmd" >>"$loginfile"
		fi

		statusmsg "Updating current shell to set EAVE_HOME"
		source "$loginfile"
		;;
	"fish")
		varcmd="set -Ux EAVE_HOME $(pwd)"
		statusmsg -ni "First, I'll add a Universal variable to your Fish environment with the following command:"
		echo ""
		echo -e "\t$varcmd"
		echo ""

		read -p "Should I proceed? [y/n] " proceed
		if test "$proceed" = "y"; then
			fish -c "$varcmd"
		fi
		;;
	*)
		statusmsg -w "Your shell ($usershell) isn't supported by this script. Please update this script to add support!"
		;;
	esac
else
	statusmsg -ni "EAVE_HOME already set. Continuing..."
fi

echo ""

function setuppython() {
	if ! command_exists pyenv
	then
		pythonversion="$(python --version)"
		pythonpath="$(which python)"
		statusmsg -w "It is recommended to install and use pyenv to manage the python version for this project."
		statusmsg -w "With pyenv installed, this project can automatically install and select the correct python version."
		statusmsg -w "I did not find pyenv, so I will proceed with the available python executable ($pythonpath)."
	else
		pyenv install -s
		pyenv version
	fi

	python -m venv --clear --upgrade-deps .venv

	source .venv/bin/activate
}

statusmsg -ni "Next, I will setup the python virtual environment."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setuppython
fi
echo ""

function setupgcloud () (
	cd $tmpdir

	local gcloudversion="426.0.0"
	local arch=$(get_arch_normalized)
	local filename="google-cloud-cli-$gcloudversion-$kernel-$arch.tar.gz"
	curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/$filename
	tar -xf $file
	mv google-cloud-sdk $HOME
	cd $HOME
	./google-cloud-sdk/install.sh

	# case $usershell in
	# "bash" | "zsh")
	# 	loginfile=$(shloginfile)
	# 	varcmd="export PATH=\"~/google-cloud-sdk/bin:\$PATH\""
	# 	statusmsg -ni "I'll add the following line to $loginfile to add the gcloud CLI into your PATH:"
	# 	echo ""
	# 	statusmsg -o "\t$varcmd"
	# 	echo ""

	# 	read -p "Should I proceed? [y/n] " proceed
	# 	if test "$proceed" = "y"; then
	# 		echo -e "\n$varcmd" >>"$loginfile"
	# 	fi

	# 	source "$loginfile"
	# 	;;
	# "fish")
	# 	varcmd="fish_add_path ~/google-cloud-sdk/bin"
	# 	statusmsg -ni "I'll add the gcloud CLI to your path with the following command:"
	# 	echo ""
	# 	echo -e "\t$varcmd"
	# 	echo ""

	# 	read -p "Should I proceed? [y/n] " proceed
	# 	if test "$proceed" = "y"; then
	# 		fish -c "$varcmd"
	# 	fi
	# 	;;
	# *)
	# 	statusmsg -w "Your shell ($usershell) isn't supported by this script. Please update this script to add support!"
	# 	;;
	# esac
)

statusmsg -ni "OK! Now I'm going to setup the gcloud CLI."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setupgcloud
fi
echo ""

function setupcloudsqlproxy () (
	local tmpdir=/tmp/eave-setup
	mkdir -p $tmpdir
	cd $tmpdir

	local proxyversion="2.1.2"
	local arch=$(get_arch_normalized_alt)

	curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v$proxyversion/cloud-sql-proxy.$kernel.$arch
	chmod +x cloud-sql-proxy
	mv cloud-sql-proxy /usr/local/bin
)

statusmsg -ni "Now I'll install the Cloud SQL Proxy for your system."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setupcloudsqlproxy
fi
echo ""

function setuppostgres() (
	statusmsg -i "sudo privileges are required to install postgres"

	case $kernel in
		linux)
			sudo apt install -y postgresql
			;;
		darwin)
			statusmsg -w "You should manually install postgres."
			;;
	esac

	statusmsg -i "sudo privileges are required to create a database user."
	sudo -u postgres createuser -sidrwl --replication $(whoami)
	createdb eave
	createdb eave-test
)
# statusmsg -ni "Next, I'm going to install and setup postgres."
# read -p "Should I proceed? [y/n] " proceed
# if test "$proceed" = "y"; then
# 	setuppostgres
# fi
# echo ""


function setupapps () (
	cd ${EAVE_HOME}
	statusmsg -ni "Setting up shared dev dependencies"
	cd develop/javascript/eslint/
	bin/setup
	cd ${EAVE_HOME}

	python-activate-venv
	python -m pip install python-dotenv

	run_in_all_projects bin/setup
)

statusmsg -ni "Next, I'm going to visit each of the app and lib directories and run the setup script for each one."
read -p "Should I proceed? [y/n] " proceed
if test "$proceed" = "y"; then
	setupapps
fi
echo ""

statusmsg -s "Done!"
statusmsg -i "Now, open EAVE_HOME (this directory) in VSCode and you're ready to go. (Hint: try \`code .\`)"
